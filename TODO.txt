* Place OnBegin/OnFinished on dedicated threads with pre-emption disabled (with seq cst fences). The current situation
  where they logically run on a given test-thread is awkward and inefficient (see e.g. the hoops that the COWList Example
  has to jump through).

* Exhaustive scheduler: Finish fair/demonic scheduling (need to deal with thread wake-ups)
* Exhaustive scheduler: eliminate wasteful switches / perform DPOR

* PCT Scheduler / randomized context bounding.
* Left/Right RelaExample: Interesting invariants / verifications?
* Add MaybeSwitchAssert ?
* Finish RMonitor 
* Finish RInterlocked
* Lift execution order limitation via promises (see e.g. CDSChecker or POPL'2017 paper "A promising semantics for relaxed-memory concurrency")
* ExtendedReflection : GC-pinning / transparent API 
* Implement a CLR+x86-TSO mode?
* Review how RMW ops + Relaxed (especially, but other MOs too) are specified in C++11 vs. how my impl behaves.
* Progress / interruptibility.
* Review Seq cst fence
* More Example algorithms: Michael-Scott two-lock queue, bounded SPMC/MPMC, CRQ/LCRQ, Fetch-Add Queue.  
* Add Invariant() feature
* Perf. optimizations. 
* Multi-threaded test runner.
* Replay optimization: Find failing execution and replay with event logging on, otherwise always have event logging off.
* Interesting statistics?